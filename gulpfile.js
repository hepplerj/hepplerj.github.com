'use strict';
const gulp         = require("gulp"),
      shell        = require('shelljs'),
      del          = require('del'),
      fs           = require('fs'),
      rsync        = require('gulp-rsync');

// Preview / Build tasks
// -----------------------------------------------------------------------

// `gulp preview` -- runs Hugo server, same as default gulp
gulp.task('preview', done => {
  shell.exec('hugo serve --buildDrafts --buildFuture --disableFastRender');
  done();
});

// 'gulp clean:images' -- removes only image assets
gulp.task('clean:images', () => {
  return del(['public/assets/images']);
});

// 'gulp clean:prod' -- removes built site but keep images
gulp.task('clean:prod', () => {
  return del(['public/**/*', '!public/assets', '!public/assets/images', '!public/assets/images/**/*'], {'dot': true});
});

// 'gulp clean:nuke' -- removes everything generated by Hugo
gulp.task('clean:nuke', () => {
  shell.exec("rm -rf public/*");
  done;
})

// Generate the site in public/
gulp.task('build:site', done => {
    shell.exec('hugo --cleanDestinationDir --minify');
    done();
})

// Remove assets
gulp.task('clean', gulp.parallel('clean:prod'));

// Build entire site for production in public/
gulp.task('build', gulp.parallel('clean', 'build:site'));

// Deployment Tasks
// -----------------------------------------------------------------------

// reads rsync credentials file and incrementally uploads site to server
gulp.task('upload', () => {
  var credentials = JSON.parse(fs.readFileSync('rsync-credentials.json', 'utf8'));

  return gulp.src("public")
    .pipe(rsync({
      //dryrun: true,
      root: "public/",
      hostname: credentials.hostname,
      username: credentials.username,
      destination: credentials.destination,
      incremental: true,
      recursive: true,
      compress: true,
      clean: false,
      chmod: 'Du=rwx,Dgo=rx,Fu=rw,Fgo=r'
    }));
});

// submit sitemap XML file to Google and Bing
gulp.task('submit:sitemap', function(cb) {
  var SitemapUrl = 'https://jasonheppler.org/sitemap.xml';

  require('submit-sitemap').submitSitemap(SitemapUrl, function(err) {
    if (err)
      console.warn(err);

    cb();
  });
});

// deploy and submit sitemap 
gulp.task('deploy', gulp.series('upload', 'submit:sitemap'));

// default task -- preview server
gulp.task('default', gulp.series('preview'));